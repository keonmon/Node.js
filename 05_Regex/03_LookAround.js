// 03_LookAround.js

// 전,후방 탐색 

// # 전방탐색 #
// 정규표현식으로 구분해내고 매칭한 결과 내용 중, '정규표현식에서 사용되었던 글자를 제외한 나머지를 결과로 얻고자 할 때'
// 예를 들어 http://www.naver.com 에서 '글자들이 반복되고 : 로끝남' 이라는 정규식이 있다면 결과는 'http:' 가 될테지만 원하는 결과가 ':'를 제외한 'http'만을 목적으로 할 때 사용하는 방식이다.

// let a = 'http://www.naver.com';
// // '.' : \n이 아닌 모든 글자
// let b = a.match(/.+:/g);
// console.log(b); // [ 'http:' ]

// a = 'https://www.naver.com';
// // '.' : \n이 아닌 모든 글자
// b = a.match(/.+:/g);
// console.log(b); // [ 'https:' ]

// // 위 결과에서 ':'를 없애고 싶을 때는?  -> 전방탐색을 사용한다.
// // 정규식 : (?=정규식 또는 글자)
// // 조건에 매칭된 후, 해당(?= 뒤로 이어진) 정규식에 있는 글자는 소모하지 않는다(취하지 않는다)

// a = 'http://www.naver.com';
// // '.' : \n이 아닌 모든 글자
// b = a.match(/.+(?=:)/g);
// console.log(b); // [ 'http' ]

// a = 'https://www.naver.com';
// // '.' : \n이 아닌 모든 글자
// b = a.match(/.+(?=:)/g);
// console.log(b); // [ 'https' ]



// 긍정형 전방 탐색
// (?=정규식 또는 글자) -> 정규식 또는 글자와 매칭되는 패턴 검색

// 부정형 전방 탐색
// (?!정규식 또는 글자) -> 정규식 또는 글자를 제외한 매칭 검색

// 긍정형 후방 탐색
// (?<=정규식 또는 글자) -> 정규식 또는 글자와 매칭되는 패턴 검색

// 부정형 후방 탐색
// (?<!정규식 또는 글자) -> 정규식 또는 글자를 제외한 매칭 검색

//긍정형, 부정형 모두 검색 결과에서 검색된 내용을 취하지 않는다. 위 예제는 마지막 글자가 ':'인 결과를 검색하되 ':'는 검색결과로 취하지 않은 결과이다.

// 전방 탐색
// 검색 후 버릴 문자를 뒤에서 검색한다.
// ?=정규식 : 기존 방식과 동일

// 후방 탐색
// 앞에서 전방탐색이라는 이름으로 매칭하고자 할 때, 버릴 문자와 취할 문자들을 앞, 또는 뒤에서 검색하는 것을 말한다. 전방위 탐색은 검색하고 버리를 문자를 앞쪽에서 검색한다.
// ?<=정규식

// 주로 html에서 html 태그를 취하지 않고 내용만 발췌할 때 자주 사용한다( 크롤링 )
// 줄이 나뉘어진 데이터를 한줄로 잇고 싶다면 '\'(백슬러쉬)를 활용한다.
// 그러나 데이터가 줄이 나뉜채로 하나의 데이터로 저장하고 싶다면 '\n\'를 활용한다. (줄을 나눈 뒤 잇기)
// a= '<html>\n\
// <head>\n\
// <title>안녕하세요 반갑습니다</title>\n\
// </head>\n\
// <body>\n\
// <div>웹사이트에서 내용을 발췌한다.</div>\n\
// </body>\n\
// </html>';

// console.log(a);

// b=a.match(/<div>.+<\/div>/g);   // [ '<div>웹사이트에서 내용을 발췌한다.</div>' ]
// console.log(b);

// // 후방탐색 (?<=정규식)과 전방탐색(?=정규식)을 활용
// b=a.match(/(?<=<div>).+(?=<\/div>)/g);   // [ '웹사이트에서 내용을 발췌한다.' ]
// console.log(b);


// // 위 a변수의 내용 중 타이틀을 발췌하여 출력
// b = a.match(/(?<=<title>).+(?=<\/title>)/g);
// console.log(b);



// 연습문제1
a = '일반텍스트 파일 : abc.txt, 자동실행파일 : autoexe.bat, 데이터분석파일 : bigdata.at, 더미파일 : gfreag, 알수없는 파일 : korea.bar';

// // a변수에서 '파일이름.확장자명' 으로 구성된 파일명만 골라서 출력하세요 
// b = a.match(/\b\w*[.]\w+/g);    // [ 'abc.txt', 'autoexe.bat', 'bigdata.at', 'korea.bar' ]
// console.log(b);


// // 연습문제2
// // 파일의 확장자가 'b로 시작하는 파일'을 찾아 출력
// b = a.match(/\b\w*[.]b\w+/g);    // [ 'autoexe.bat', 'korea.bar' ]
// console.log(b);

// // 연습문제3
// // 파일의 확장자가 'b로 시작하지 않는 파일'을 찾아 출력
// b = a.match(/\b\w*[.][^b]\w+/g);    // [ 'abc.txt', 'bigdata.at' ]
// console.log(b);

// // 연습문제4
// // 파일의 확장자가 'a 또는 b로 시작하는 파일'을 찾아 출력
// b = a.match(/\b\w*[.](a|b)\w+/g);    // [ 'autoexe.bat', 'bigdata.at', 'korea.bar' ]
// console.log(b);

// // 연습문제5
// // 파일의 확장자가 'a로 시작하거나, b로 시작하지 않는 파일'을 찾아 출력
// b = a.match(/\b\w*[.](a|[^b])\w+/g);    // [ 'abc.txt', 'bigdata.at' ]
// console.log(b);


a = '박길동 : park@naver.com, 김하나 : kim@daum.net, 김둘 : ee@myhome.co.kr, 웹사이트 : http://abcdefg.co.kr';

// // 연습문제6
// // 이메일 주소만 탐색하여 출력
// b = a.match(/\b\w*[@]\w+([.]\w*){1,2}/g);    // [ 'park@naver.com', 'kim@daum.net', 'ee@myhome.co.kr' ]
// console.log(b);

// // 연습문제7
// // 이메일 주소 중 .net과 .com만 골라 출력
// b = a.match(/\b\w*[@]\w+[.](com|net)/g);    // [ 'park@naver.com', 'kim@daum.net' ]
// console.log(b);


a = '현재 접속중인 외부 아이피는 121.66.42.195 이며, 내부 아이피는 192.168.0.2 입니다.';

// 연습문제8
// 위 내용에서 아이피주소만 매칭하여 출력
b = a.match(/\d+[.]\d+[.]\d+[.]\d+/g);    // [ '121.66.42.195', '192.168.0.2' ]
// b = a.match(/[012][0-9][0-9][.] ... /g);    // [ '121.66.42.195', '192.168.0.2' ]
console.log(b);



